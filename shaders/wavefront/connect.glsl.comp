#version 450

struct Ray {
  vec3 origin, direction, inv_direction, throughput;
  float t;
  uint triangle_index;
  uvec2 screen_pos;
};

layout(std430, set = 0, binding = 0) readonly buffer Rays { Ray rays[]; };
layout(        set = 0, binding = 1, rgba8) uniform writeonly image2D img;
layout(std430, set = 0, binding = 2) buffer Accum { vec3 accum[]; };

layout(std140, set = 1, binding = 0) uniform Input {
  uint frame_num;
  uvec2 screen_size;
};


void main() {
  const Ray ray = rays[gl_GlobalInvocationID.x];
  uint i = ray.screen_pos.x  + ray.screen_pos.y * screen_size.x;
  accum[i] += ray.throughput;
  imageStore(img, ivec2(ray.screen_pos), vec4(accum[i] / float(frame_num), 1.0));
}
