#version 450

#define PI (3.1415926535359)
#define INV_PI (1.0 / PI)
#define EPSILON (0.0001)

struct Ray {
  vec3 origin, direction, inv_direction, throughput;
  float t;
  uint triangle_index;
  uvec2 screen_pos;
};

struct Material {
  int emissive;
  vec3 diffuse, n;
  float refl;
};

struct Triangle {
  vec3 p1, p2, p3, normal;
  Material material;
};

layout(local_size_x = 16, local_size_y = 16) in;
layout(std430, set = 0, binding = 0) buffer Rays { Ray rays[]; };
layout(std430, set = 0, binding = 1) buffer RayIndex { uint ray_index; };
layout(std430, set = 1, binding = 1) buffer Triangles { Triangle triangles[]; };

// wide hash + deep lcg from 
// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
uint wang_hash(uint seed) {
  seed = (seed ^ 61) ^ (seed >> 16);
  seed *= 9;
  seed = seed ^ (seed >> 4);
  seed *= 0x27d4eb2d;
  seed = seed ^ (seed >> 15);
  return seed;
}

float next_float_lcg(inout uint state) {
  state = 1664525 * state + 1013904223;
  return state * (1.0 / 4294967296.0);
}

vec3 diffuse_reflection_cos(inout uint seed)
{
  // based on SmallVCM
   float r0 = next_float_lcg(seed);
   float r1 = next_float_lcg(seed);
  float term1 = 2 * PI * r0;
  float term2 = sqrt( 1 - r1 );
  return vec3( cos( term1 ) * term2, sin( term1 ) * term2, sqrt( r1 ) );
}

vec3 local_to_world(const vec3 V, const vec3 N ) {
  // based on SmallVCM
  vec3 tmp = (abs( N.x ) > 0.99f) ? vec3( 0, 1, 0 ) : vec3( 1, 0, 0 );
  vec3 B = normalize( cross( N, tmp ) );
  vec3 T = cross( B, N );
  return V.x * T + V.y * B + V.z * N;
}


void main() {
  const Ray ray = rays[gl_GlobalInvocationID.x];
  vec3 intersection = ray.origin + ray.t * ray.direction;
  Triangle triangle = triangles[ray.triangle_index];
  Material material = triangle.material;
  vec3 normal = triangle.normal;
  uint seed = (ray.screen_pos.x * 40163) + (ray.screen_pos.y * 33997); // TODO add accumulator? And Step type?
  seed = wang_hash(seed);

  if (material.emissive == 1) {
    uint i = atomicAdd(ray_index, 1);
    rays[i] = ray;
    rays[i].throughput *= material.diffuse;
    return;
  }


  float r0 = next_float_lcg(seed);
  float survival = clamp(0.1, 1.0, max(max(ray.throughput.x, ray.throughput.y), ray.throughput.z));
  if (r0 >= survival) return;

  
  uint i = atomicAdd(ray_index, 1);
  rays[i] = ray;
  r0 = next_float_lcg(seed);
  rays[i].direction = local_to_world(diffuse_reflection_cos(seed), normal);
  rays[i].origin = intersection + rays[i].direction * EPSILON;
  rays[i].inv_direction = vec3(1.) / rays[i].direction;
  
  vec3 brdf = material.diffuse * INV_PI;
  float cos_i = dot(rays[i].direction, normal);
  float pdf = cos_i * INV_PI;

  rays[i].throughput /= survival;
  rays[i].throughput *= (cos_i * (1.0 / pdf)) * brdf;

  
}
